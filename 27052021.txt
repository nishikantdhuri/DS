Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6
class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums)==1:
            return nums[0]
        fsum=-99999999
        tsum=0
        for i in nums:
            if i+tsum <= i:
                tsum=i
            else:
                tsum=tsum+i
            fsum=max(fsum,tsum)
        
        return fsum

No.
to best of ur kmow do any of ur fam work for UBS - No

Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.
The number of elements initialized in nums1 and nums2 are m and n respectively. You may assume that nums1 has a size equal to m + n such that it has enough space to hold additional elements from nums2.
Example 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        
        put=len(nums1)-1
        m=m-1
        n=n-1
        while m >=0 and n >=0:
            if nums1[m] <= nums2[n]:
                nums1[put]=nums2[n]
                n=n-1
            else:
                nums1[put]=nums1[m]
                m=m-1
            put=put-1
            
        while n>=0:
            nums1[put]=nums2[n]
            n=n-1
            put=put-1
 


Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.
Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        pos=0
        for i,v in enumerate(nums):
            if nums[i] != 0:
                nums[i],nums[pos]=nums[pos],nums[i]
                pos=pos+1    




The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1

class Solution(object):
    def fib(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n <=1:
            return n
        return self.memo(n)

    
    def memo(self,n):
        cache={0:0,1:1}        
        for i in range(2,n+1):
            cache[i]=cache[i-1]+cache[i-2]
        return cache[n]




Given a list of the scores of different students, items, where items[i] = [IDi, scorei] represents one score from a student with IDi, calculate each student's top five average.

Return the answer as an array of pairs result, where result[j] = [IDj, topFiveAveragej] represents the student with IDj and their top five average. Sort result by IDj in increasing order.

A student's top five average is calculated by taking the sum of their top five scores and dividing it by 5 using integer division.

 

Example 1:

Input: items = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]
Output: [[1,87],[2,88]]
Explanation: 
The student with ID = 1 got scores 91, 92, 60, 65, 87, and 100. Their top five average is (100 + 92 + 91 + 87 + 65) / 5 = 87.
The student with ID = 2 got scores 93, 97, 77, 100, and 76. Their top five average is (100 + 97 + 93 + 77 + 76) / 5 = 88.6, but with integer division their average converts to 88.
class Solution(object):
    def highFive(self, items):
        """
        :type items: List[List[int]]
        :rtype: List[List[int]]
        """
        items = sorted(sorted(items, key=lambda x: x[1],reverse=True), key=lambda x: x[0],reverse=False)
        d = defaultdict(list)
        for i in items:
            d[i[0]].append(i[1])
        op=[]
        for i in d:
            op.append([i,int(sum(d[i][:5])/5)])
        
        return op
        